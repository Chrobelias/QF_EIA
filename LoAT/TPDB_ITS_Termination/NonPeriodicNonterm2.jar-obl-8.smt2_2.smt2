(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun it11 () Int)
(declare-fun it12 () Int)
(declare-fun it13 () Int)
(declare-fun it25 () Int)
(declare-fun it26 () Int)
(declare-fun it27 () Int)
(declare-fun it28 () Int)
(declare-fun it19 () Int)
(assert (and (> (+ it4 1) 0) (> (+ it3 1) 0) (= (+ i1 (- 3)) 0)))
(assert (= (+ it11 (- 2)) 0))
(assert (= (+ (* it4 (- 1)) it12) 0))
(assert (= (+ (* it3 (- 1)) it13) 0))
(assert (let ((a!1 (> (+ (+ it12 (* it25 (- 1))) 2) 0))
      (a!2 (> (+ (+ it12 (* it25 (- 1))) (* it13 (- 1)) 1) 0)))
  (and (> (+ it13 1) 0)
       (>= (+ it12 (* it13 (- 1))) 0)
       a!1
       a!2
       (>= (+ (* it11 (- 1)) 2) 0)
       (>= (+ it11 (- 2)) 0)
       (>= (+ it25 (- 1)) 0))))
(assert (= (+ it26 (* it11 (- 1))) 0))
(assert (= (+ it27 (* it12 (- 1)) it25) 0))
(assert (= (+ it28 (* it13 (- 1))) 0))
(assert (let ((a!1 (+ (* (+ 0 it27) (exp 2 (+ it19 (- 1))) (+ 0 (- 1)))
              (* (exp 2 (+ it19 (- 1))) (+ 0 (- 1)))
              (+ 0 it19)
              (+ 0 it28))))
  (and (>= a!1 (+ 0 0))
       (>= (* it27 2) 0)
       (>= (+ it26 (- 2)) 0)
       (> (+ it27 1) 0)
       (> (+ it28 1) 0)
       (>= (+ (* it26 (- 1)) 2) 0)
       (>= (+ it27 (* it28 (- 1))) 0)
       (>= (+ it19 (- 1)) 0))))
(check-sat)
