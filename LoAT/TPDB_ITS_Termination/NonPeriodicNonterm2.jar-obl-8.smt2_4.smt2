(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun it4 () Int)
(declare-fun it3 () Int)
(declare-fun i1 () Int)
(declare-fun it11 () Int)
(declare-fun it12 () Int)
(declare-fun it13 () Int)
(declare-fun it42 () Int)
(declare-fun it19 () Int)
(assert (and (= (+ i1 (- 3)) 0) (> (+ it3 1) 0) (> (+ it4 1) 0)))
(assert (= (+ it11 (- 2)) 0))
(assert (= (+ (* it4 (- 1)) it12) 0))
(assert (= (+ it13 (* it3 (- 1))) 0))
(assert (let ((a!1 (* (* (exp 2 (+ it42 (- 1))) (+ 0 it12)) (+ 0 2)))
      (a!2 (* (* (+ 0 it19) (exp 2 (+ it42 (- 1)))) (+ 0 (- 2))))
      (a!5 (* (* (exp 2 (+ it42 (- 1))) (+ 0 it12)) (+ 0 (- 1)))))
(let ((a!3 (+ (+ 0 it19)
              (* (exp 2 (+ it42 (- 1))) (+ 0 2))
              a!1
              a!2
              (+ 0 1)))
      (a!4 (+ (+ 0 (+ (* it19 2) (* it13 (- 1)) (* it42 (- 1))))
              (* (exp 2 (+ it42 (- 1))) (+ 0 2))
              a!1
              a!2
              (+ 0 (- 1))))
      (a!6 (+ (+ 0 (+ (* it19 (- 1)) it13 it42))
              (* (exp 2 (+ it42 (- 1))) (+ 0 (- 1)))
              a!5
              (* (+ 0 it19) (exp 2 (+ it42 (- 1))))))
      (a!7 (+ (+ 0 (+ it19 (* it13 (- 1)) (* it42 (- 1))))
              (* (exp 2 (+ it42 (- 1))) (+ 0 2))
              a!1
              a!2)))
  (and (<= (+ it19 (* it12 (- 1))) 0)
       (>= (+ it42 (- 1)) 0)
       (> (+ it13 1) 0)
       (> a!3 (+ 0 0))
       (>= a!4 (+ 0 0))
       (> (+ (* it19 (- 1)) (* it12 2) 3) 0)
       (> (+ it13 2) 0)
       (>= (+ (* it11 (- 1)) 2) 0)
       (>= (+ it11 (- 2)) 0)
       (> (+ it12 1) 0)
       (>= a!6 (+ 0 0))
       (>= (* it12 2) 0)
       (>= (+ it19 (- 1)) 0)
       (>= (+ (* it13 (- 1)) it12) 0)
       (>= (+ it13 (* it12 (- 1))) 0)
       (> a!7 (+ 0 0))))))
(check-sat)
