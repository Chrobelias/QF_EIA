(set-info :status unsat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it284 () Int)
(declare-fun it285 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun it286 () Int)
(declare-fun it287 () Int)
(declare-fun i4 () Int)
(declare-fun it288 () Int)
(declare-fun i5 () Int)
(declare-fun it289 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun it290 () Int)
(declare-fun it333 () Int)
(declare-fun it334 () Int)
(declare-fun it335 () Int)
(declare-fun it336 () Int)
(declare-fun it337 () Int)
(declare-fun it338 () Int)
(declare-fun it339 () Int)
(declare-fun it341 () Int)
(declare-fun it342 () Int)
(declare-fun it343 () Int)
(declare-fun it344 () Int)
(declare-fun it345 () Int)
(declare-fun it346 () Int)
(declare-fun it347 () Int)
(declare-fun it348 () Int)
(declare-fun it349 () Int)
(declare-fun it350 () Int)
(declare-fun it351 () Int)
(declare-fun it352 () Int)
(declare-fun it353 () Int)
(declare-fun it354 () Int)
(declare-fun it200 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it284 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it285 (- 1)) 0))
(assert (= (+ it286 (* i3 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it287) 0))
(assert (= (+ (* i5 (- 1)) it288) 0))
(assert (= (+ (* i6 (- 1)) it289) 0))
(assert (= (+ it290 (* i7 (- 1))) 0))
(assert (and (<= (+ it289 (- 5)) 0)
     (= (+ it284 (- 2)) 0)
     (<= (+ (* it289 (- 1)) (- 5)) 0)
     (> it286 0)))
(assert (= (+ it333 (- 3)) 0))
(assert (= (+ it334 (* it285 (- 1)) (- 2)) 0))
(assert (= (+ (* it286 (- 1)) it335) 0))
(assert (= (+ (* it286 (- 1)) it336) 0))
(assert (= (+ it337 (* it290 (- 1))) 0))
(assert (= (+ it338 (* it289 (- 1))) 0))
(assert (= (+ (* it290 (- 1)) it339) 0))
(assert (let ((a!1 (< (+ (+ 0 (* it337 (- 1))) (exp it336 2) (exp it338 5)) (+ 0 0))))
  (and a!1 (> it336 0) (= (+ it333 (- 3)) 0))))
(assert (= (+ it341 (- 3)) 0))
(assert (= (+ (* it334 (- 1)) it342 (- 1)) 0))
(assert (= (+ it343 (* it335 (- 1))) 0))
(assert (= (+ it344 (* it336 2)) 0))
(assert (= (+ (+ 0 (* it337 (- 3))) (* (exp it338 3) (+ 0 2)) (+ 0 it345))
   (+ 0 0)))
(assert (= (+ it346 (* it338 (- 1))) 0))
(assert (= (+ it347 (* it339 (- 1))) 0))
(assert (let ((a!1 (< (+ (exp it346 5) (exp it344 2) (+ 0 (* it345 (- 1)))) (+ 0 0))))
  (and (= (+ it341 (- 3)) 0) a!1 (< it344 0))))
(assert (= (+ it348 (- 3)) 0))
(assert (= (+ it349 (* it342 (- 1)) (- 1)) 0))
(assert (= (+ (* it343 (- 1)) it350) 0))
(assert (= (+ (* it344 2) it351) 0))
(assert (let ((a!1 (+ (+ 0 (+ it352 (* it345 (- 3)))) (* (exp it346 3) (+ 0 2)))))
  (= a!1 (+ 0 0))))
(assert (= (+ (* it346 (- 1)) it353) 0))
(assert (= (+ (* it347 (- 1)) it354) 0))
(assert (let ((a!1 (* (* (+ 0 it352) (exp 9 (+ it200 (- 1)))) (+ 0 3)))
      (a!2 (* (* (exp it353 3) (exp 9 (+ it200 (- 1)))) (+ 0 (- 3))))
      (a!3 (* (exp it351 2) (exp (exp 4 (+ it200 (- 1))) (+ 0 2))))
      (a!5 (> (+ (+ 0 it352)
                 (* (exp it351 2) (+ 0 (- 1)))
                 (* (exp it353 5) (+ 0 (- 1))))
              (+ 0 0)))
      (a!6 (* (* (exp it353 3) (exp 9 (+ it200 (- 1)))) (+ 0 (- 1)))))
(let ((a!4 (> (+ a!1
                 (exp it353 3)
                 a!2
                 (* (exp it353 5) (+ 0 (- 1)))
                 (* a!3 (+ 0 (- 4))))
              (+ 0 0)))
      (a!7 (+ (* (+ 0 it352) (exp 9 (+ it200 (- 1))))
              (exp it353 3)
              a!6
              (* (exp it353 5) (+ 0 (- 1)))
              (* a!3 (+ 0 (- 1))))))
  (and a!4
       (> (* it351 (- 1)) 0)
       (>= (+ it348 (- 3)) 0)
       (> (* it351 (- 2)) 0)
       a!5
       (>= (+ (* it348 (- 1)) 3) 0)
       (> a!7 (+ 0 0))
       (>= (+ it200 (- 1)) 0)))))
(check-sat)
