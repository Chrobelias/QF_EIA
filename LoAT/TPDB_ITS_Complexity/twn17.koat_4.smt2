(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun it3 () Int)
(declare-fun i3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun it5 () Int)
(declare-fun i5 () Int)
(declare-fun it6 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun it7 () Int)
(declare-fun it163 () Int)
(declare-fun it164 () Int)
(declare-fun it165 () Int)
(declare-fun it166 () Int)
(declare-fun it167 () Int)
(declare-fun it168 () Int)
(declare-fun it169 () Int)
(declare-fun it171 () Int)
(declare-fun it172 () Int)
(declare-fun it173 () Int)
(declare-fun it174 () Int)
(declare-fun it175 () Int)
(declare-fun it176 () Int)
(declare-fun it177 () Int)
(declare-fun it178 () Int)
(declare-fun it179 () Int)
(declare-fun it180 () Int)
(declare-fun it181 () Int)
(declare-fun it182 () Int)
(declare-fun it183 () Int)
(declare-fun it184 () Int)
(declare-fun it66 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 1)) 0))
(assert (= (+ (* i3 (- 1)) it3) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ (* i5 (- 1)) it5) 0))
(assert (= (+ (* i6 (- 1)) it6) 0))
(assert (= (+ it7 (* i7 (- 1))) 0))
(assert (and (<= (+ it6 (- 5)) 0)
     (<= (+ (* it6 (- 1)) (- 5)) 0)
     (> it3 0)
     (= (+ it1 (- 2)) 0)))
(assert (= (+ it163 (- 3)) 0))
(assert (= (+ (* it2 (- 1)) it164 (- 2)) 0))
(assert (= (+ it165 (* it3 (- 1))) 0))
(assert (= (+ it166 (* it3 (- 1))) 0))
(assert (= (+ (* it7 (- 1)) it167) 0))
(assert (= (+ it168 (* it6 (- 1))) 0))
(assert (= (+ (* it7 (- 1)) it169) 0))
(assert (let ((a!1 (< (+ (exp it168 5) (exp it166 2) (+ 0 (* it167 (- 1)))) (+ 0 0))))
  (and (= (+ it163 (- 3)) 0) a!1 (> it166 0))))
(assert (= (+ it171 (- 3)) 0))
(assert (= (+ it172 (* it164 (- 1)) (- 1)) 0))
(assert (= (+ (* it165 (- 1)) it173) 0))
(assert (= (+ (* it166 2) it174) 0))
(assert (= (+ (+ 0 it175) (* (exp it168 3) (+ 0 2)) (+ 0 (* it167 (- 3))))
   (+ 0 0)))
(assert (= (+ (* it168 (- 1)) it176) 0))
(assert (= (+ (* it169 (- 1)) it177) 0))
(assert (let ((a!1 (< (+ (+ 0 (* it175 (- 1))) (exp it174 2) (exp it176 5)) (+ 0 0))))
  (and (< it174 0) a!1 (= (+ it171 (- 3)) 0))))
(assert (= (+ it178 (- 3)) 0))
(assert (= (+ (* it172 (- 1)) it179 (- 1)) 0))
(assert (= (+ (* it173 (- 1)) it180) 0))
(assert (= (+ (* it174 2) it181) 0))
(assert (let ((a!1 (+ (+ 0 (+ (* it175 (- 3)) it182)) (* (exp it176 3) (+ 0 2)))))
  (= a!1 (+ 0 0))))
(assert (= (+ (* it176 (- 1)) it183) 0))
(assert (= (+ it184 (* it177 (- 1))) 0))
(assert (let ((a!1 (* (* (exp 9 (+ it66 (- 1))) (exp it183 3)) (+ 0 (- 3))))
      (a!2 (* (exp (exp 4 (+ it66 (- 1))) (+ 0 2)) (exp it181 2)))
      (a!3 (* (* (exp 9 (+ it66 (- 1))) (+ 0 it182)) (+ 0 3)))
      (a!5 (* (* (exp 9 (+ it66 (- 1))) (exp it183 3)) (+ 0 (- 1))))
      (a!7 (> (+ (+ 0 it182)
                 (* (exp it181 2) (+ 0 (- 1)))
                 (* (exp it183 5) (+ 0 (- 1))))
              (+ 0 0))))
(let ((a!4 (> (+ a!1
                 (* (exp it183 5) (+ 0 (- 1)))
                 (* a!2 (+ 0 (- 4)))
                 (exp it183 3)
                 a!3)
              (+ 0 0)))
      (a!6 (+ a!5
              (* (exp it183 5) (+ 0 (- 1)))
              (* a!2 (+ 0 (- 1)))
              (exp it183 3)
              (* (exp 9 (+ it66 (- 1))) (+ 0 it182)))))
  (and (>= (+ it178 (- 3)) 0)
       a!4
       (> (* it181 2) 0)
       (> it181 0)
       (> a!6 (+ 0 0))
       a!7
       (>= (+ it66 (- 1)) 0)
       (>= (+ (* it178 (- 1)) 3) 0)))))
(check-sat)
