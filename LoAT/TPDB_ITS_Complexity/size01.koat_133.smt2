(set-info :status unsat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun i2 () Int)
(declare-fun it2 () Int)
(declare-fun i3 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun it5 () Int)
(declare-fun i6 () Int)
(declare-fun it6 () Int)
(declare-fun it48 () Int)
(declare-fun it838 () Int)
(declare-fun it839 () Int)
(declare-fun it840 () Int)
(declare-fun it841 () Int)
(declare-fun it842 () Int)
(declare-fun it843 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ it2 (* i2 (- 1)) (- 1)) 0))
(assert (= (+ it3 (* i3 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ it5 (* i5 (- 1))) 0))
(assert (= (+ it6 (* i6 (- 1))) 0))
(assert (let ((a!1 (> (+ (+ (* it48 (- 2)) it3) 2) 0))
      (a!2 (> (+ (+ (* it48 (- 2)) it3) 1) 0)))
  (and (>= (+ it48 (- 1)) 0)
       a!1
       a!2
       (>= (+ (* it1 (- 1)) 2) 0)
       (>= (+ it1 (- 2)) 0))))
(assert (= (+ it838 (* it1 (- 1))) 0))
(assert (= (+ (* it48 (- 2)) (* it2 (- 1)) it839) 0))
(assert (= (+ (* it48 2) (* it3 (- 1)) it840) 0))
(assert (= (+ (+ 0 it841) (* (exp (- 1) it48) (+ 0 it4) (+ 0 (- 1))))
   (+ 0 0)))
(assert (= (+ (+ 0 it842) (* (+ 0 it5) (exp (- 1) it48) (+ 0 (- 1))))
   (+ 0 0)))
(assert (= (+ (+ 0 (* it48 (- 1)))
      (* (exp it48 2) (+ 0 it3) (+ 0 12))
      (+ 0 (* it6 (- 3)))
      (* (exp it48 2) (+ 0 6))
      (* (+ 0 it48) (exp it3 2) (+ 0 (- 6)))
      (* (exp it48 3) (+ 0 (- 8)))
      (+ 0 (* it843 3))
      (+ 0 (* it48 it3 (- 6))))
   (+ 0 0)))
(assert (and (>= (+ (* it838 (- 1)) 2) 0)
     (= 2 0)
     (> it840 0)
     (>= (+ it838 (- 2)) 0)
     (> (+ it840 (- 1)) 0)))
(check-sat)
