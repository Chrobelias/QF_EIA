(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun it3 () Int)
(declare-fun i3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun it5 () Int)
(declare-fun i5 () Int)
(declare-fun it6 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun it7 () Int)
(declare-fun it92 () Int)
(declare-fun it93 () Int)
(declare-fun it94 () Int)
(declare-fun it95 () Int)
(declare-fun it96 () Int)
(declare-fun it97 () Int)
(declare-fun it98 () Int)
(declare-fun it100 () Int)
(declare-fun it101 () Int)
(declare-fun it102 () Int)
(declare-fun it103 () Int)
(declare-fun it104 () Int)
(declare-fun it105 () Int)
(declare-fun it106 () Int)
(declare-fun it128 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 1)) 0))
(assert (= (+ (* i3 (- 1)) it3) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ (* i5 (- 1)) it5) 0))
(assert (= (+ (* i6 (- 1)) it6) 0))
(assert (= (+ it7 (* i7 (- 1))) 0))
(assert (and (= (+ it1 (- 2)) 0)
     (<= (+ it6 (- 5)) 0)
     (> it3 0)
     (<= (+ (* it6 (- 1)) (- 5)) 0)))
(assert (= (+ it92 (- 3)) 0))
(assert (= (+ it93 (* it2 (- 1)) (- 2)) 0))
(assert (= (+ it94 (* it3 (- 1))) 0))
(assert (= (+ it95 (* it3 (- 1))) 0))
(assert (= (+ (* it7 (- 1)) it96) 0))
(assert (= (+ it97 (* it6 (- 1))) 0))
(assert (= (+ it98 (* it7 (- 1))) 0))
(assert (let ((a!1 (< (+ (exp it97 5) (+ 0 (* it96 (- 1))) (exp it95 2)) (+ 0 0))))
  (and a!1 (> it95 0) (= (+ it92 (- 3)) 0))))
(assert (= (+ it100 (- 3)) 0))
(assert (= (+ (* it93 (- 1)) it101 (- 2)) 0))
(assert (= (+ (* it94 (- 1)) it102) 0))
(assert (= (+ (* it95 2) it103) 0))
(assert (let ((a!1 (+ (+ 0 (+ (* it96 (- 3)) it104)) (* (exp it97 3) (+ 0 2)))))
  (= a!1 (+ 0 0))))
(assert (= (+ (* it97 (- 1)) it105) 0))
(assert (= (+ (* it98 (- 1)) it106) 0))
(assert (let ((a!1 (* (* (exp 9 (+ it128 (- 1))) (+ 0 it104)) (+ 0 3)))
      (a!2 (* (exp it103 2) (exp (exp 4 (+ it128 (- 1))) (+ 0 2))))
      (a!3 (* (* (exp 9 (+ it128 (- 1))) (exp it105 3)) (+ 0 (- 3))))
      (a!5 (> (+ (+ 0 it104)
                 (* (exp it103 2) (+ 0 (- 1)))
                 (* (exp it105 5) (+ 0 (- 1))))
              (+ 0 0)))
      (a!6 (* (* (exp 9 (+ it128 (- 1))) (exp it105 3)) (+ 0 (- 1)))))
(let ((a!4 (> (+ (exp it105 3)
                 a!1
                 (* a!2 (+ 0 (- 4)))
                 a!3
                 (* (exp it105 5) (+ 0 (- 1))))
              (+ 0 0)))
      (a!7 (+ (exp it105 3)
              (* (exp 9 (+ it128 (- 1))) (+ 0 it104))
              (* a!2 (+ 0 (- 1)))
              a!6
              (* (exp it105 5) (+ 0 (- 1))))))
  (and (> (* it103 (- 1)) 0)
       a!4
       a!5
       (> (* it103 (- 2)) 0)
       (> a!7 (+ 0 0))
       (>= (+ it128 (- 1)) 0)
       (>= (+ it100 (- 3)) 0)
       (>= (+ (* it100 (- 1)) 3) 0)))))
(check-sat)
