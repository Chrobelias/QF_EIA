(set-logic ALL)
(declare-fun i5 () Int)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun it3 () Int)
(declare-fun i6 () Int)
(declare-fun it4 () Int)
(declare-fun i7 () Int)
(declare-fun it5 () Int)
(declare-fun it6 () Int)
(declare-fun it7 () Int)
(declare-fun it36 () Int)
(assert (and (= (+ i1 (- 1)) 0) (> i5 0)))
(assert (= (+ it1 (- 3)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 2)) 0))
(assert (= (+ (* i6 (- 1)) it3) 0))
(assert (= (+ (* i7 (- 1)) it4) 0))
(assert (= (+ (* i5 (- 1)) it5) 0))
(assert (= (+ (* i6 (- 1)) it6) 0))
(assert (= (+ (* i7 (- 1)) it7) 0))
(assert (let ((a!1 (+ (* (exp it5 2) (exp 5 (+ it36 (- 1))) (- (/ 1.0 4.0)))
              (* (exp 2 (+ it36 (- 1))) (+ 0 it4))
              (* (exp it5 2) (/ 1.0 4.0))
              (* (exp 5 (+ it36 (- 1))) (+ 0 it3) (+ 0 (- 1))))))
  (and (>= (+ it1 (- 3)) 0)
       (>= (+ (* it1 (- 1)) 3) 0)
       (> a!1 (+ 0 0))
       (>= (+ it36 (- 1)) 0)
       (> it3 0))))
(check-sat)
