(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun i8 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun i6 () Int)
(declare-fun it3 () Int)
(declare-fun i7 () Int)
(declare-fun it4 () Int)
(declare-fun it5 () Int)
(declare-fun i5 () Int)
(declare-fun it6 () Int)
(declare-fun it7 () Int)
(declare-fun it8 () Int)
(declare-fun it197 () Int)
(declare-fun it198 () Int)
(declare-fun it199 () Int)
(declare-fun it200 () Int)
(declare-fun it201 () Int)
(declare-fun it202 () Int)
(declare-fun it203 () Int)
(declare-fun it204 () Int)
(declare-fun it122 () Int)
(assert (and (> i8 0) (= (+ i1 (- 1)) 0)))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 1)) 0))
(assert (= (+ it3 (* i6 (- 1))) 0))
(assert (= (+ it4 (* i7 (- 1))) 0))
(assert (= (+ (* i5 (- 1)) it5) 0))
(assert (= (+ it6 (* i6 (- 1))) 0))
(assert (= (+ it7 (* i7 (- 1))) 0))
(assert (= (+ (* i8 (- 1)) it8) 0))
(assert (and (= (+ it1 (- 2)) 0) (<= it5 0)))
(assert (= (+ it197 (- 3)) 0))
(assert (= (+ (* it2 (- 1)) it198 (- 1)) 0))
(assert (= (+ (* it3 (- 1)) it199) 0))
(assert (= (+ (* it4 (- 1)) it200) 0))
(assert (= (+ (* it5 (- 1)) it201) 0))
(assert (= (+ it202 (* it5 (- 1))) 0))
(assert (= (+ it203 (* it7 (- 1))) 0))
(assert (= (+ (* it8 (- 1)) it204) 0))
(assert (let ((a!1 (* (exp it200 2) (exp (exp 2 (+ it122 (- 1))) (+ 0 2)) (+ 0 4))))
(let ((a!2 (+ (exp it201 2)
              (* (exp 5 (+ it122 (- 1))) (exp it201 2) (+ 0 (- 1)))
              a!1
              (* (+ 0 it199) (exp 5 (+ it122 (- 1))) (+ 0 (- 4))))))
  (and (> it199 0)
       (>= (+ it197 (- 3)) 0)
       (> a!2 (+ 0 0))
       (>= (+ it122 (- 1)) 0)
       (>= (+ (* it197 (- 1)) 3) 0)))))
(check-sat)
