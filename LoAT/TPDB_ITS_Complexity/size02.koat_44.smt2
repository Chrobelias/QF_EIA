(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun i2 () Int)
(declare-fun it2 () Int)
(declare-fun i3 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun it5 () Int)
(declare-fun i6 () Int)
(declare-fun it6 () Int)
(declare-fun it92 () Int)
(declare-fun it13 () Int)
(declare-fun it117 () Int)
(declare-fun it120 () Int)
(declare-fun it121 () Int)
(declare-fun it122 () Int)
(declare-fun it123 () Int)
(declare-fun it124 () Int)
(declare-fun it125 () Int)
(declare-fun it202 () Int)
(declare-fun it203 () Int)
(declare-fun it204 () Int)
(declare-fun it205 () Int)
(declare-fun it206 () Int)
(declare-fun it207 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ it2 (* i2 (- 1)) (- 1)) 0))
(assert (= (+ it3 (* i3 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ it5 (* i5 (- 1))) 0))
(assert (= (+ it6 (* i6 (- 1))) 0))
(assert (let ((a!1 (+ (* (+ it117 (- 1)) it13 (- 2))
              it3
              (* it13 (- 2))
              (* (+ it117 (- 1)) it92 (- 2))))
      (a!3 (> (+ (+ it3 (* it13 (- 2))) (* it92 (- 2)) 1) 0))
      (a!5 (> (+ (+ it3 (* it13 (- 2))) 1) 0)))
(let ((a!2 (> (+ (+ a!1 (* it92 (- 2))) 2) 0))
      (a!4 (> (+ (+ a!1 (* it92 (- 2))) 1) 0)))
  (and (>= (+ (* it1 (- 1)) 2) 0)
       a!2
       a!3
       a!4
       (>= (+ it1 (- 2)) 0)
       (>= (+ it13 (- 1)) 0)
       (> (+ a!1 1) 0)
       (>= (+ it117 (- 1)) 0)
       (> (+ a!1 2) 0)
       a!5
       (>= (+ it92 (- 1)) 0)))))
(assert (= (+ it120 (* it1 (- 1))) 0))
(assert (= (+ it121 (* it117 it13 (- 2)) (* it2 (- 1)) (* it117 it92 (- 2))) 0))
(assert (= (+ (* it117 it13 2) (* it117 it92 2) it122 (* it3 (- 1))) 0))
(assert (let ((a!1 (* (exp (- 1) (+ (* it117 it13) (* it117 it92)))
              (+ 0 it4)
              (+ 0 (- 1)))))
  (= (+ a!1 (+ 0 it123)) (+ 0 0))))
(assert (let ((a!1 (* (+ 0 it5)
              (exp (- 1) (+ (* it117 it13) (* it117 it92)))
              (+ 0 (- 1)))))
  (= (+ (+ 0 it124) a!1) (+ 0 0))))
(assert (let ((a!1 (+ (* (exp it117 3) (exp it13 2) (+ 0 it92) (+ 0 (- 24)))
              (* (* (+ 0 it117) (exp it3 2)) (+ 0 it92) (+ 0 (- 6)))
              (+ 0 (* it117 it13 (- 1)))
              (* (* (exp it117 2) (+ 0 it3)) (exp it13 2) (+ 0 12))
              (* (exp it117 2) (+ 0 it13) (+ 0 it92) (+ 0 12))
              (* (* (+ 0 it117) (exp it3 2)) (+ 0 it13) (+ 0 (- 6)))
              (+ 0 (* it125 3))
              (+ 0 (* it117 it92 (- 1)))
              (* (* (exp it117 2) (+ 0 it3)) (exp it92 2) (+ 0 12))
              (* (* (exp it117 2) (+ 0 it3))
                 (+ 0 it13)
                 (+ 0 it92)
                 (+ 0 24))
              (+ 0 (* it6 (- 3)))
              (+ 0 (* (* it117 it3) it13 (- 6)))
              (* (exp it117 3) (+ 0 it13) (exp it92 2) (+ 0 (- 24)))
              (* (exp it117 3) (exp it92 3) (+ 0 (- 8)))
              (* (exp it117 2) (exp it13 2) (+ 0 6))
              (+ 0 (* (* it117 it3) it92 (- 6)))
              (* (exp it117 3) (exp it13 3) (+ 0 (- 8)))
              (* (exp it117 2) (exp it92 2) (+ 0 6)))))
  (= a!1 (+ 0 0))))
(assert (= (+ it120 (- 2)) 0))
(assert (= (+ it202 (- 3)) 0))
(assert (= (+ (* it121 (- 1)) it203 (- 1)) 0))
(assert (= (+ (* it122 (- 1)) it204) 0))
(assert (= (+ it205 (* it123 (- 1))) 0))
(assert (= (+ (* it124 (- 1)) it206) 0))
(assert (= (+ (* it125 (- 1)) it207) 0))
(assert (and (> (+ it205 it206) 0) (= (+ it202 (- 3)) 0)))
(check-sat)
