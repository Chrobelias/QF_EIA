(set-info :status unsat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun i2 () Int)
(declare-fun it2 () Int)
(declare-fun i3 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun it5 () Int)
(declare-fun i6 () Int)
(declare-fun it6 () Int)
(declare-fun it13 () Int)
(declare-fun it288 () Int)
(declare-fun it289 () Int)
(declare-fun it290 () Int)
(declare-fun it291 () Int)
(declare-fun it292 () Int)
(declare-fun it293 () Int)
(declare-fun it326 () Int)
(declare-fun it327 () Int)
(declare-fun it328 () Int)
(declare-fun it329 () Int)
(declare-fun it330 () Int)
(declare-fun it331 () Int)
(declare-fun it294 () Int)
(declare-fun it48 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ it2 (* i2 (- 1)) (- 1)) 0))
(assert (= (+ it3 (* i3 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ it5 (* i5 (- 1))) 0))
(assert (= (+ it6 (* i6 (- 1))) 0))
(assert (let ((a!1 (> (+ (+ it3 (* it13 (- 2))) 2) 0))
      (a!2 (> (+ (+ it3 (* it13 (- 2))) 1) 0)))
  (and (>= (+ it1 (- 2)) 0)
       a!1
       (>= (+ it13 (- 1)) 0)
       a!2
       (>= (+ (* it1 (- 1)) 2) 0))))
(assert (= (+ it288 (* it1 (- 1))) 0))
(assert (= (+ it289 (* it2 (- 1)) (* it13 (- 2))) 0))
(assert (= (+ it290 (* it3 (- 1)) (* it13 2)) 0))
(assert (= (+ (* (exp (- 1) it13) (+ 0 it4) (+ 0 (- 1))) (+ 0 it291))
   (+ 0 0)))
(assert (= (+ (* (+ 0 it5) (exp (- 1) it13) (+ 0 (- 1))) (+ 0 it292))
   (+ 0 0)))
(assert (= (+ (* (+ 0 it3) (exp it13 2) (+ 0 12))
      (* (exp it13 3) (+ 0 (- 8)))
      (* (exp it13 2) (+ 0 6))
      (+ 0 (* it293 3))
      (+ 0 (* it3 it13 (- 6)))
      (+ 0 (* it6 (- 3)))
      (* (exp it3 2) (+ 0 it13) (+ 0 (- 6)))
      (+ 0 (* it13 (- 1))))
   (+ 0 0)))
(assert (and (> it290 0) (= (+ it288 (- 2)) 0) (> (+ it290 (- 1)) 0)))
(assert (= (+ it326 (- 2)) 0))
(assert (= (+ (* it289 (- 1)) it327 (- 2)) 0))
(assert (= (+ (* it290 (- 1)) it328 2) 0))
(assert (= (+ it329 it291) 0))
(assert (= (+ it330 it292) 0))
(assert (let ((a!1 (+ (* (exp it290 2) (+ 0 (- 1)))
              (+ 0 (* it293 (- 1)))
              (* (exp (+ it290 (- 1)) 2) (+ 0 (- 1)))
              (+ 0 it331))))
  (= a!1 (+ 0 0))))
(assert (let ((a!1 (> (+ (+ (* it294 (- 2)) it328) 1) 0))
      (a!2 (> (+ (+ (* it294 (- 2)) it328) 2) 0))
      (a!3 (> (+ (+ (* it48 (- 2)) (* it294 (- 2)) it328) 2) 0))
      (a!4 (> (+ (+ (* it48 (- 2)) (* it294 (- 2)) it328) 1) 0)))
  (and a!1
       (<= (+ (* it48 2) (* it294 2)) 0)
       (>= (+ (* it326 (- 1)) 2) 0)
       (= (+ (* it48 2) (* it294 2)) 0)
       (>= (+ it294 (- 1)) 0)
       (>= (+ it48 (- 1)) 0)
       a!2
       a!3
       (= 0 0)
       (>= (+ it326 (- 2)) 0)
       a!4)))
(check-sat)
