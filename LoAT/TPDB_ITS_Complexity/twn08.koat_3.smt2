(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it6 () Int)
(declare-fun i2 () Int)
(declare-fun it7 () Int)
(declare-fun it2 () Int)
(declare-fun it8 () Int)
(declare-fun it9 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun it10 () Int)
(declare-fun i6 () Int)
(declare-fun it11 () Int)
(declare-fun i7 () Int)
(declare-fun it12 () Int)
(declare-fun it259 () Int)
(declare-fun it260 () Int)
(declare-fun it261 () Int)
(declare-fun it262 () Int)
(declare-fun it263 () Int)
(declare-fun it264 () Int)
(declare-fun it265 () Int)
(declare-fun it273 () Int)
(declare-fun it274 () Int)
(declare-fun it275 () Int)
(declare-fun it276 () Int)
(declare-fun it277 () Int)
(declare-fun it278 () Int)
(declare-fun it279 () Int)
(declare-fun it281 () Int)
(declare-fun it282 () Int)
(declare-fun it283 () Int)
(declare-fun it284 () Int)
(declare-fun it285 () Int)
(declare-fun it286 () Int)
(declare-fun it287 () Int)
(declare-fun it256 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it6 (- 2)) 0))
(assert (= (+ it7 (* i2 (- 1)) (- 1)) 0))
(assert (= (+ it8 (* it2 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it9) 0))
(assert (= (+ it10 (* i5 (- 1))) 0))
(assert (= (+ it11 (* i6 (- 1))) 0))
(assert (= (+ it12 (* i7 (- 1))) 0))
(assert (and (= (+ it6 (- 2)) 0) (> it9 0)))
(assert (= (+ it259 (- 3)) 0))
(assert (= (+ (* it7 (- 1)) it260 (- 1)) 0))
(assert (= (+ it261 (* it8 (- 1))) 0))
(assert (= (+ it262 (* it9 (- 1))) 0))
(assert (= (+ it263 (* it10 (- 1))) 0))
(assert (= (+ it264 (* it11 (- 1))) 0))
(assert (= (+ it265 (* it12 (- 1))) 0))
(assert (= (+ it259 (- 3)) 0))
(assert (= (+ it273 (- 4)) 0))
(assert (= (+ it274 (* it260 (- 1)) (- 1)) 0))
(assert (= (+ (* it261 (- 1)) it275) 0))
(assert (= (+ it276 (* it262 (- 1))) 0))
(assert (= (+ (* it263 (- 1)) it277) 0))
(assert (= (+ (* it264 (- 1)) it278) 0))
(assert (= (+ it279 (* it265 (- 1))) 0))
(assert (let ((a!1 (< (+ (+ 0 it277) (* (exp it278 2) (+ 0 (- 1)))) (+ 0 0))))
  (and a!1 (= (+ it273 (- 4)) 0) (> it277 0))))
(assert (= (+ it281 (- 4)) 0))
(assert (= (+ it282 (* it274 (- 1)) (- 1)) 0))
(assert (= (+ it283 (* it275 (- 1))) 0))
(assert (= (+ (* it276 (- 1)) it284) 0))
(assert (let ((a!1 (+ (+ 0 (+ it285 (* it277 (- 5))))
              (* (exp it279 2) (+ 0 (- 1))))))
  (= a!1 (+ 0 0))))
(assert (= (+ it286 (* it278 (- 2))) 0))
(assert (= (+ (* it279 (- 1)) it287) 0))
(assert (let ((a!1 (* (exp (exp 2 (+ it256 (- 1))) (+ 0 2)) (exp it286 2) (+ 0 4))))
(let ((a!2 (+ a!1
              (* (exp 5 (+ it256 (- 1))) (exp it287 2) (+ 0 (- 1)))
              (exp it287 2)
              (* (exp 5 (+ it256 (- 1))) (+ 0 it285) (+ 0 (- 4))))))
  (and (> a!2 (+ 0 0))
       (>= (+ (* it281 (- 1)) 4) 0)
       (> it285 0)
       (>= (+ it281 (- 4)) 0)
       (>= (+ it256 (- 1)) 0)))))
(check-sat)
