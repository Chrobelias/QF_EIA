(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun it5 () Int)
(declare-fun it9 () Int)
(declare-fun it11 () Int)
(declare-fun it12 () Int)
(declare-fun it13 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it3 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it4 (- 1)) 0))
(assert (= (+ it5 (* i3 (- 1))) 0))
(assert (let ((a!1 (+ (* (+ 0 it5) (exp 4 (+ it9 (- 1))))
              (* (exp 4 (+ it9 (- 1))) (- (/ 10.0 3.0)))
              (/ 10.0 3.0)))
      (a!2 (* (* (+ 0 it5) (exp 4 (+ it9 (- 1)))) (+ 0 (- 2)))))
(let ((a!3 (+ a!2 (* (exp 4 (+ it9 (- 1))) (/ 20.0 3.0)) (/ 10.0 3.0))))
  (and (>= (+ (* it3 (- 1)) 2) 0)
       (>= a!1 (+ 0 0))
       (>= (+ it3 (- 2)) 0)
       (>= (+ it9 (- 1)) 0)
       (>= a!3 (+ 0 0))))))
(assert (= (+ it11 (* it3 (- 1))) 0))
(assert (= (+ (* it9 (- 2)) it12 (* it4 (- 1))) 0))
(assert (= (+ (* (+ 0 it5) (exp 4 it9) (+ 0 (- 1)))
      (+ 0 it13)
      (* (exp 4 it9) (/ 10.0 3.0))
      (- (/ 10.0 3.0)))
   (+ 0 0)))
(assert (and (>= (+ (* it13 (- 2)) 10) 0)
     (>= (+ (* it11 (- 1)) 2) 0)
     (>= it13 0)
     (<= (+ (* it13 6) (- 20)) 0)
     (<= (+ (* it13 (- 3)) 10) 0)
     (>= (+ it11 (- 2)) 0)))
(check-sat)
