(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun i7 () Int)
(declare-fun i3 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun it3 () Int)
(declare-fun it4 () Int)
(declare-fun i4 () Int)
(declare-fun it5 () Int)
(declare-fun i5 () Int)
(declare-fun it6 () Int)
(declare-fun i6 () Int)
(declare-fun it7 () Int)
(declare-fun it120 () Int)
(declare-fun it121 () Int)
(declare-fun it122 () Int)
(declare-fun it123 () Int)
(declare-fun it124 () Int)
(declare-fun it125 () Int)
(declare-fun it126 () Int)
(declare-fun it127 () Int)
(assert (and (> i3 0) (> i7 0) (= (+ i1 (- 1)) 0)))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 1)) 0))
(assert (= (+ (* i3 (- 1)) it3) 0))
(assert (= (+ (* i4 (- 1)) it4) 0))
(assert (= (+ (* i5 (- 1)) it5) 0))
(assert (= (+ (* i6 (- 1)) it6) 0))
(assert (= (+ it7 (* i7 (- 1))) 0))
(assert (let ((a!1 (> (+ (+ it3 (* it120 (- 2))) 1) 0))
      (a!2 (> (+ (+ it3 (* it120 (- 2))) 2) 0)))
  (and (>= (+ (* it1 (- 1)) 2) 0)
       a!1
       a!2
       (>= (+ it1 (- 2)) 0)
       (>= (+ it120 (- 1)) 0))))
(assert (= (+ (* it1 (- 1)) it121) 0))
(assert (= (+ (* it2 (- 1)) it122 (* it120 (- 2))) 0))
(assert (= (+ (* it3 (- 1)) it123 (* it120 2)) 0))
(assert (= (+ (+ 0 it124) (* (+ 0 it4) (exp (- 1) it120) (+ 0 (- 1))))
   (+ 0 0)))
(assert (= (+ (+ 0 it125) (* (+ 0 it5) (exp (- 1) it120) (+ 0 (- 1))))
   (+ 0 0)))
(assert (= (+ (* (exp it3 2) (+ 0 it120) (+ 0 (- 6)))
      (* (exp it120 2) (+ 0 6))
      (* (exp it120 3) (+ 0 (- 8)))
      (* (+ 0 it3) (exp it120 2) (+ 0 12))
      (+ 0 (* it3 it120 (- 6)))
      (+ 0 (* it6 (- 3)))
      (+ 0 (* it126 3))
      (+ 0 (* it120 (- 1))))
   (+ 0 0)))
(assert (= (+ it127 (* it7 (- 1))) 0))
(assert (and (>= (+ (* it121 (- 1)) 2) 0)
     (>= (+ it121 (- 2)) 0)
     (> (+ it123 (- 1)) 0)
     (= 2 0)
     (> it123 0)))
(check-sat)
