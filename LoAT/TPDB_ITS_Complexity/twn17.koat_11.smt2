(set-info :status unsat) ; swine result
(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it284 () Int)
(declare-fun it285 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun it286 () Int)
(declare-fun it287 () Int)
(declare-fun i4 () Int)
(declare-fun it288 () Int)
(declare-fun i5 () Int)
(declare-fun it289 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(declare-fun it290 () Int)
(declare-fun it508 () Int)
(declare-fun it509 () Int)
(declare-fun it510 () Int)
(declare-fun it511 () Int)
(declare-fun it512 () Int)
(declare-fun it513 () Int)
(declare-fun it514 () Int)
(declare-fun it522 () Int)
(declare-fun it523 () Int)
(declare-fun it524 () Int)
(declare-fun it525 () Int)
(declare-fun it526 () Int)
(declare-fun it527 () Int)
(declare-fun it528 () Int)
(declare-fun it66 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it284 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it285 (- 1)) 0))
(assert (= (+ it286 (* i3 (- 1))) 0))
(assert (= (+ (* i4 (- 1)) it287) 0))
(assert (= (+ (* i5 (- 1)) it288) 0))
(assert (= (+ (* i6 (- 1)) it289) 0))
(assert (= (+ it290 (* i7 (- 1))) 0))
(assert (and (> it286 0)
     (= (+ it284 (- 2)) 0)
     (<= (+ (* it289 (- 1)) (- 5)) 0)
     (<= (+ it289 (- 5)) 0)))
(assert (= (+ it508 (- 3)) 0))
(assert (= (+ it509 (* it285 (- 1)) (- 2)) 0))
(assert (= (+ (* it286 (- 1)) it510) 0))
(assert (= (+ (* it286 (- 1)) it511) 0))
(assert (= (+ (* it290 (- 1)) it512) 0))
(assert (= (+ it513 (* it289 (- 1))) 0))
(assert (= (+ (* it290 (- 1)) it514) 0))
(assert (let ((a!1 (< (+ (exp it513 5) (exp it511 2) (+ 0 (* it512 (- 1)))) (+ 0 0))))
  (and a!1 (> it511 0) (= (+ it508 (- 3)) 0))))
(assert (= (+ it522 (- 3)) 0))
(assert (= (+ it523 (* it509 (- 1)) (- 1)) 0))
(assert (= (+ it524 (* it510 (- 1))) 0))
(assert (= (+ (* it511 2) it525) 0))
(assert (let ((a!1 (+ (+ 0 (+ it526 (* it512 (- 3)))) (* (exp it513 3) (+ 0 2)))))
  (= a!1 (+ 0 0))))
(assert (= (+ (* it513 (- 1)) it527) 0))
(assert (= (+ (* it514 (- 1)) it528) 0))
(assert (let ((a!1 (* (exp (exp 4 (+ it66 (- 1))) (+ 0 2)) (exp it525 2)))
      (a!2 (* (* (exp 9 (+ it66 (- 1))) (exp it527 3)) (+ 0 (- 3))))
      (a!3 (* (* (+ 0 it526) (exp 9 (+ it66 (- 1)))) (+ 0 3)))
      (a!5 (> (+ (* (exp it525 2) (+ 0 (- 1)))
                 (+ 0 it526)
                 (* (exp it527 5) (+ 0 (- 1))))
              (+ 0 0)))
      (a!6 (* (* (exp 9 (+ it66 (- 1))) (exp it527 3)) (+ 0 (- 1)))))
(let ((a!4 (> (+ (* a!1 (+ 0 (- 4)))
                 a!2
                 a!3
                 (* (exp it527 5) (+ 0 (- 1)))
                 (exp it527 3))
              (+ 0 0)))
      (a!7 (+ (* a!1 (+ 0 (- 1)))
              a!6
              (* (+ 0 it526) (exp 9 (+ it66 (- 1))))
              (* (exp it527 5) (+ 0 (- 1)))
              (exp it527 3))))
  (and a!4
       (>= (+ (* it522 (- 1)) 3) 0)
       (> (* it525 2) 0)
       (> it525 0)
       (>= (+ it522 (- 3)) 0)
       (>= (+ it66 (- 1)) 0)
       a!5
       (> a!7 (+ 0 0))))))
(check-sat)
