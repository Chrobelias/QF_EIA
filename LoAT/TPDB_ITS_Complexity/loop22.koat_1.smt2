(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it1 () Int)
(declare-fun it2 () Int)
(declare-fun i2 () Int)
(declare-fun it3 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun it4 () Int)
(declare-fun it9 () Int)
(declare-fun it11 () Int)
(declare-fun it12 () Int)
(declare-fun it13 () Int)
(declare-fun it14 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it1 (- 2)) 0))
(assert (= (+ (* i2 (- 1)) it2 (- 1)) 0))
(assert (= (+ (* i3 (- 1)) it3) 0))
(assert (= (+ it4 (* i4 (- 1))) 0))
(assert (let ((a!1 (+ (+ 0 (+ it4 it9))
              (* (exp 2 (+ it9 (- 1))) (+ 0 it3) (+ 0 (- 1))))))
  (and (>= (+ it3 (- 1)) 0)
       (>= a!1 (+ 0 0))
       (>= (+ (* it1 (- 1)) 2) 0)
       (>= (+ it1 (- 2)) 0)
       (>= (+ it9 (- 1)) 0))))
(assert (= (+ (* it1 (- 1)) it11) 0))
(assert (= (+ (* it2 (- 1)) it12 (* it9 (- 1))) 0))
(assert (= (+ (+ 0 it13) (* (+ 0 it3) (exp 2 it9) (+ 0 (- 1)))) (+ 0 0)))
(assert (= (+ (* it4 (- 1)) it14 (* it9 (- 1))) 0))
(assert (and (>= (+ it14 (* it13 (- 1)) 1) 0)
     (= (- 1) 0)
     (>= (+ it13 (- 1)) 0)
     (>= (+ (* it11 (- 1)) 2) 0)
     (= (* it13 (- 1)) 0)
     (>= (+ it11 (- 2)) 0)))
(check-sat)
