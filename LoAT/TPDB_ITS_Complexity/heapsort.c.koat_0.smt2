(set-logic ALL)
(declare-fun i1 () Int)
(declare-fun it5 () Int)
(declare-fun it6 () Int)
(declare-fun i2 () Int)
(declare-fun it7 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun it8 () Int)
(declare-fun it9 () Int)
(declare-fun i5 () Int)
(declare-fun it10 () Int)
(declare-fun i6 () Int)
(declare-fun it11 () Int)
(declare-fun it12 () Int)
(declare-fun i8 () Int)
(declare-fun it13 () Int)
(declare-fun i9 () Int)
(declare-fun i10 () Int)
(declare-fun it14 () Int)
(declare-fun it213 () Int)
(declare-fun it4 () Int)
(declare-fun it2 () Int)
(assert (= (+ i1 (- 1)) 0))
(assert (= (+ it5 (- 13)) 0))
(assert (= (+ (* i2 (- 1)) it6 (- 12)) 0))
(assert (= (+ (* i3 (- 1)) it7) 0))
(assert (= (+ it8 (* i4 (- 1))) 0))
(assert (= (+ (* i5 (- 1)) it9) 0))
(assert (= (+ (* i6 (- 1)) it10) 0))
(assert (= (+ it11 (- 1)) 0))
(assert (= (+ (* i8 (- 1)) it12) 0))
(assert (= (+ (* i9 (- 1)) it13) 0))
(assert (= (+ it14 (* i10 (- 1))) 0))
(assert (let ((a!1 (+ (+ 0 it14)
              (* (+ 0 it11) (exp 2 (+ it213 (- 1))) (+ 0 (- 2)))))
      (a!2 (>= (+ (+ it14 (* it11 (- 2))) (- 1)) 0)))
  (and (> it2 0)
       (> it14 0)
       (>= (+ a!1 (+ 0 (- 1))) (+ 0 0))
       a!2
       (>= (+ (* it5 (- 1)) 13) 0)
       (>= (+ (* it11 2) (- 1)) 0)
       (>= (+ it11 (- 1)) 0)
       (>= (+ it14 (* it11 (- 1))) 0)
       (>= (* it4 (- 1)) 0)
       (>= (+ it5 (- 13)) 0)
       (>= (* it11 2) 0)
       (> it11 0)
       (>= a!1 (+ 0 0))
       (>= (+ it14 (* it11 (- 2))) 0)
       (>= (+ it213 (- 1)) 0))))
(check-sat)
