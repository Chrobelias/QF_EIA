(set-info :status sat) ; swine result
(set-logic ALL)
(declare-fun bt31 () Bool)
(declare-fun bt33 () Bool)
(declare-fun bt36 () Bool)
(declare-fun bt35 () Bool)
(declare-fun bt34 () Bool)
(declare-fun bt32 () Bool)
(declare-fun bt30 () Bool)
(declare-fun i1 () Int)
(declare-fun it56 () Int)
(declare-fun it57 () Int)
(declare-fun it58 () Int)
(declare-fun it23 () Int)
(declare-fun it46 () Int)
(declare-fun it65 () Int)
(declare-fun it66 () Int)
(declare-fun it67 () Int)
(assert (and (= (+ i1 (- 1)) 0) bt30 bt32 bt34 bt35 (not bt36) (not bt33) (not bt31)))
(assert (= (+ it56 (- 2)) 0))
(assert (= (+ it57 (- 1)) 0))
(assert (= (+ (* it23 (- 1)) it58) 0))
(assert (let ((a!1 (+ (+ 0 it58)
              (* (+ 0 it57) (exp 2 (+ it46 (- 1))) (+ 0 (- 1))))))
  (and (> (+ (* it57 (- 1)) it58) 0)
       (> a!1 (+ 0 0))
       (>= (+ it56 (- 2)) 0)
       (>= (+ (* it56 (- 1)) 2) 0)
       (>= (+ it46 (- 1)) 0))))
(assert (= (+ it65 (* it56 (- 1))) 0))
(assert (= (+ (+ 0 it66) (* (+ 0 it57) (exp 2 it46) (+ 0 (- 1)))) (+ 0 0)))
(assert (= (+ (* it58 (- 1)) it67) 0))
(assert (and (= (+ it65 (- 2)) 0) (> (+ (* it66 (- 1)) it67) 0)))
(check-sat)
